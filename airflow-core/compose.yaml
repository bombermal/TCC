version: '3'
x-airflow-common:
  &airflow-common
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.2.2-python3.9}
  build: ./dockerfiles/airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:redis123@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 5 # Just to have a fast load in the front-end. Do not use it in production with those configurations.
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true' # "_run_image of the DockerOperator returns now a python string, not a byte string" Ref: https://github.com/apache/airflow/issues/13487
    AIRFLOW__WEBSERVER__X_FRAME_ENABLED: 'false' # To DENY the webserver to be embedded in an iframe. This was add for secutity reasons.
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./extract:/opt/airflow/extract
    - "/var/run/docker.sock:/var/run/docker.sock" # We will pass the Docker Deamon as a volume to allow the webserver containers start docker images. Ref: https://stackoverflow.com/q/51342810/7024760
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-0}"
  depends_on:
    redis:
      condition: service_healthy
    postgres-airflow:
      condition: service_healthy
  extra_hosts:
    - "dmhost:${DMHOST:-127.0.0.1}"

services:

  ## ================================ ##
  ##         Airflow services         ##
  ## ================================ ##
  postgres-airflow:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./volumes/postgresql:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  redis:
    image: redis:latest
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    command: --requirepass redis123
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8082:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
  ## ================================ ##
  ##         Spark services           ##
  ## ================================ ##
  spark:
    build:
        context: ./dockerfiles/spark
    environment:
      - SPARK_MODE=master
    ports:
      - '${PORT_SPARK_MASTER:-8888}:8080'
      - '${PORT_SPARK_UI:-7777}:7077'
    volumes:
      - ./data:/data
      - ./src:/src
    restart: always
  spark-worker:
    build:
        context: ./dockerfiles/spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_WORKER_MEMORY=8G
      - SPARK_EXECUTOR_MEMORY=8G
      - SPARK_WORKER_CORES=4
    ports:
      - '${PORT_SPARK_WORKER:-8889}:8081'
    restart: always
    volumes:
      - ./data:/data
      - ./src:/src
  jupyter:
    build: 
        context: ./dockerfiles/jupyter
    ports:
      - '${PORT_JUPYTER:-8888}:8888'
    volumes:
      - ./data:/data
      - ./dags/${PROJETO}/spark_jobs:/home/jovyan/spark_jobs
      - ./dags:/home/jovyan/dags
    command: "start-notebook.sh --NotebookApp.token='123' --NotebookApp.password=''"
